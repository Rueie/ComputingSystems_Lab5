version: '3.1'

services:

  shopbd:
    build: postgres/
    restart: always
    ports:
      - "127.0.0.1:8000:5432"
    container_name: shopBDserver
    volumes:
      - ./postgres/postgresData:/var/lib/postgresql/data/shopInfo
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500MiB
      
  productserv:
    build: golang/product/
    restart: always
    ports:
      - "127.0.0.1:8010:8010"
    container_name: productService
    volumes:
      - ./golang/product/productServiceData:/usr/src/app
    depends_on:
      shopbd:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/get_products"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 50MiB
    
  inventoryserv:
    build: golang/inventory/
    restart: always
    ports:
      - "127.0.0.1:8011:8011"
    container_name: inventoryService
    volumes:
      - ./golang/inventory/inventoryServiceData:/usr/src/app
    depends_on:
      shopbd:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 50MiB

  rmqbd:
    image: rabbitmq
    restart: always
    ports:
      - "127.0.0.1:8001:5672"
    container_name: rmqServer
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 5
    volumes:
      - ./RMQ:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500MiB

  notificationserv:
    build: golang/notification/
    restart: always
    container_name: notificationService
    ports:
      - "127.0.0.1:8012:8012"
    depends_on:
      rmqbd:
        condition: service_healthy
    volumes:
      - ./golang/notification/notificationServiceData:/usr/src/app
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 50MiB
        
  keydb:
    image: eqalpha/keydb
    restart: always
    ports:
      - "127.0.0.1:8002:6379"
    container_name: keyDBserver
    volumes:
      - ./KDB/KDBdata:/data
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500MiB

  orderserv:
    build: golang/order/
    restart: always
    container_name: orderService
    ports:
      - "127.0.0.1:8013:8013"
    depends_on:
      rmqbd:
        condition: service_healthy
      keydb:
        condition: service_healthy
    volumes:
      - ./golang/order/orderServiceData:/usr/src/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/get_orders"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 50MiB

  graphqlserv:
    build: golang/graphQL/
    restart: always
    container_name: graphQLservice
    ports:
      - "127.0.0.1:8014:8014"
    depends_on:
      productserv:
        condition: service_healthy
      orderserv:
        condition: service_healthy
    volumes:
      - ./golang/graphQL/graphQLServiceData:/usr/src/app
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 50MiB

volumes:
  postgresData:
  productServiceData:
  inventoryServiceData:
  RMQ:
  notificationServiceData:
  KDBdata:
  orderServiceData:
  graphQLServiceData: